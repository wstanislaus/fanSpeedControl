syntax = "proto3";

package mcu_simulator;

// Service definition for MCU Simulator
service MCUSimulatorService {
  // Get current temperature for a specific MCU and sensor
  rpc GetTemperature (TemperatureRequest) returns (TemperatureResponse) {}
  
  // Get status of all MCUs
  rpc GetMCUStatus (StatusRequest) returns (StatusResponse) {}
  
  // Control simulation parameters
  rpc SetSimulationParams (SimulationParams) returns (SimulationResponse) {}

  // Make an MCU faulty
  rpc SetMCUFault (MCUFaultRequest) returns (FaultResponse) {}

  // Make a sensor in an MCU faulty
  rpc SetSensorFault (SensorFaultRequest) returns (FaultResponse) {}

  // Make a sensor in an MCU noisy
  rpc SetSensorNoise (SensorNoiseRequest) returns (FaultResponse) {}
}

// Request message for getting temperature
message TemperatureRequest {
  string mcu_name = 1;
  string sensor_id = 2;
}

// Response message containing temperature data
message TemperatureResponse {
  double temperature = 1;
  bool is_valid = 2;
  string error_message = 3;
}

// Request message for getting MCU status
message StatusRequest {
  string mcu_name = 1;  // Optional, if empty returns status of all MCUs
}

// Response message containing MCU status
message StatusResponse {
  repeated MCUStatus mcu_status = 1;
}

message MCUStatus {
  string mcu_name = 1;
  bool is_online = 2;
  int32 active_sensors = 3;
  repeated SensorStatus sensors = 4;
}

message SensorStatus {
  string sensor_id = 1;
  bool is_active = 2;
  string interface = 3;
  string address = 4;
  bool is_noisy = 5;
}

// Message for setting simulation parameters
message SimulationParams {
  double start_temp = 1;
  double end_temp = 2;
  double step_size = 3;
}

// Response for simulation parameter changes
message SimulationResponse {
  bool success = 1;
  string message = 2;
}

// Request message for setting MCU fault
message MCUFaultRequest {
  string mcu_name = 1;
  bool is_faulty = 2;
}

// Request message for setting sensor fault
message SensorFaultRequest {
  string mcu_name = 1;
  string sensor_id = 2;
  bool is_faulty = 3;
}

// Request message for setting sensor noise
message SensorNoiseRequest {
  string mcu_name = 1;
  string sensor_id = 2;
  bool is_noisy = 3;
}

// Response message for fault operations
message FaultResponse {
  bool success = 1;
  string message = 2;
  string current_state = 3;  // Current state of the MCU/sensor after the operation
} 