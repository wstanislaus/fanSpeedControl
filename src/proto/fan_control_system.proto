syntax = "proto3";

package fan_control_system;

// Service definition for Fan Control System
service FanControlSystemService {
  // Fan Simulator operations
  rpc GetFanStatus (FanStatusRequest) returns (FanStatusResponse) {}
  rpc SetFanSpeed (FanSpeedRequest) returns (FanSpeedResponse) {}
  rpc MakeFanBad (FanFaultRequest) returns (FaultResponse) {}
  rpc MakeFanGood (FanFaultRequest) returns (FaultResponse) {}
  rpc SetFanPWM (FanPWMRequest) returns (FanPWMResponse) {}
  rpc GetFanNoiseLevel (FanNoiseRequest) returns (FanNoiseResponse) {}
  
  // Temperature Monitor operations
  rpc GetTemperatureHistory (TemperatureHistoryRequest) returns (TemperatureHistoryResponse) {}
  rpc SetTemperatureThresholds (TemperatureThresholdsRequest) returns (TemperatureThresholdsResponse) {}
  rpc GetTemperatureThresholds (GetTemperatureThresholdsRequest) returns (GetTemperatureThresholdsResponse) {}
  rpc GetCoolingStatus (CoolingStatusRequest) returns (CoolingStatusResponse) {}
  
  // Alarm Manager operations
  rpc RaiseAlarm (RaiseAlarmRequest) returns (RaiseAlarmResponse) {}
  rpc GetAlarmHistory (AlarmHistoryRequest) returns (AlarmHistoryResponse) {}
  rpc GetAlarmConfig (AlarmConfigRequest) returns (AlarmConfigResponse) {}
  rpc GetSeverityActions (SeverityActionsRequest) returns (SeverityActionsResponse) {}
  rpc ClearAlarmHistory (ClearAlarmHistoryRequest) returns (ClearAlarmHistoryResponse) {}
  rpc GetAlarmStatistics (AlarmStatisticsRequest) returns (AlarmStatisticsResponse) {}
}

// ============================================================================
// Fan Simulator Messages
// ============================================================================

message FanStatusRequest {
  string fan_name = 1;  // Optional, if empty returns status of all fans
}

message FanStatusResponse {
  repeated FanStatus fans = 1;
}

message FanStatus {
  string name = 1;
  string model = 2;
  bool is_online = 3;
  int32 current_duty_cycle = 4;
  int32 current_pwm = 5;
  int32 noise_level_db = 6;
  string status = 7;
  string interface = 8;
  uint32 i2c_address = 9;
  int32 pwm_min = 10;
  int32 pwm_max = 11;
  int32 duty_cycle_min = 12;
  int32 duty_cycle_max = 13;
}

message FanSpeedRequest {
  string fan_name = 1;  // Optional, if empty sets speed for all fans
  int32 duty_cycle = 2;  // 0-100
}

message FanSpeedResponse {
  bool success = 1;
  string message = 2;
  repeated FanSpeedResult results = 3;
}

message FanSpeedResult {
  string fan_name = 1;
  bool success = 2;
  int32 previous_duty_cycle = 3;
  int32 new_duty_cycle = 4;
  string error_message = 5;
}

message FanFaultRequest {
  string fan_name = 1;
}

message FanPWMRequest {
  string fan_name = 1;
  int32 pwm_count = 2;
}

message FanPWMResponse {
  bool success = 1;
  string message = 2;
  int32 previous_pwm = 3;
  int32 new_pwm = 4;
  int32 corresponding_duty_cycle = 5;
}

message FanNoiseRequest {
  string fan_name = 1;
}

message FanNoiseResponse {
  int32 noise_level_db = 1;
  string noise_category = 2;  // "QUIET", "MODERATE", "LOUD", etc.
}

// ============================================================================
// Temperature Monitor Messages
// ============================================================================

message TemperatureHistoryRequest {
  string mcu_name = 1;
  int32 sensor_id = 2;
  int32 max_readings = 3;  // Maximum number of readings to return
}

message TemperatureHistoryResponse {
  repeated ProtoTemperatureReading readings = 1;
  int32 total_readings = 2;
}

message ProtoTemperatureReading {
  string mcu_name = 1;
  int32 sensor_id = 2;
  double temperature = 3;
  string status = 4;
  string timestamp = 5;
}

message TemperatureThresholdsRequest {
  double temp_threshold_low = 1;
  double temp_threshold_high = 2;
  int32 fan_speed_min = 3;
  int32 fan_speed_max = 4;
}

message TemperatureThresholdsResponse {
  bool success = 1;
  string message = 2;
}

message GetTemperatureThresholdsRequest {
  // Empty request to get temperature thresholds
}

message GetTemperatureThresholdsResponse {
  double temp_threshold_low = 1;
  double temp_threshold_high = 2;
  int32 fan_speed_min = 3;
  int32 fan_speed_max = 4;
}

message CoolingStatusRequest {
  // Empty request to get current cooling status
}

message CoolingStatusResponse {
  double average_temperature = 1;
  int32 current_fan_speed = 2;
  string cooling_mode = 3;  // "AUTO", "MANUAL", "EMERGENCY"
}

// ============================================================================
// Alarm Manager Messages
// ============================================================================

enum ProtoAlarmSeverity {
  PROTO_ALARM_INFO = 0;
  PROTO_ALARM_WARNING = 1;
  PROTO_ALARM_ERROR = 2;
  PROTO_ALARM_CRITICAL = 3;
}

message RaiseAlarmRequest {
  string alarm_source = 1;
  ProtoAlarmSeverity severity = 2;
  string message = 3;
}

message RaiseAlarmResponse {
  bool success = 1;
  string message = 2;
}

message AlarmHistoryRequest {
  string alarm_name = 1;  // Optional, if empty returns history of all alarms
  int32 max_entries = 2;  // Maximum number of entries to return
}

message AlarmHistoryResponse {
  repeated ProtoAlarmHistoryEntry entries = 1;
  int32 total_entries = 2;
}

message ProtoAlarmHistoryEntry {
  string alarm_name = 1;
  string message = 2;
  ProtoAlarmSeverity severity = 3;
  string timestamp = 4;
  bool was_acknowledged = 5;
}

message AlarmConfigRequest {
  // Empty 
}

message AlarmConfigResponse {
  repeated ProtoAlarmConfig configs = 1;
}

message ProtoAlarmConfig {
  int32 alarm_history_size = 1;
  map<string, ProtoSeverityActions> severity_actions = 2;
}

message SeverityActionsRequest {
  // Empty request to get all severity actions
}

message SeverityActionsResponse {
  map<string, ProtoSeverityActions> severity_actions = 1;
}

message ProtoSeverityActions {
  repeated string actions = 1;
}

message ClearAlarmHistoryRequest {
  string alarm_name = 1;  // Optional, if empty clears all alarm history
}

message ClearAlarmHistoryResponse {
  bool success = 1;
  string message = 2;
  int32 cleared_entries = 3;
}

message AlarmStatisticsRequest {
  string alarm_name = 1;  // Optional, if empty returns statistics for all alarms
  int32 time_window_hours = 2;  // Time window for statistics (default: 24)
}

message AlarmStatisticsResponse {
  repeated ProtoAlarmStatistics statistics = 1;
}

message ProtoAlarmStatistics {
  string alarm_name = 1;
  int32 total_count = 2;
  int32 active_count = 3;
  int32 acknowledged_count = 4;
  map<string, int32> severity_counts = 5;  // Count by severity
  string last_occurrence = 6;
  string first_occurrence = 7;
}

// ============================================================================
// Common Messages
// ============================================================================

message FaultResponse {
  bool success = 1;
  string message = 2;
  string current_state = 3;  // Current state after the operation
} 